// <auto-generated />
using System;
using Heliconia.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Heliconia.Infrastructure.Migrations
{
    [DbContext(typeof(HeliconiaContext))]
    partial class HeliconiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Heliconia")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Heliconia.Domain.AccountingEntities.DailyLedger", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<double>("MoneyTotalSales")
                        .HasColumnType("float");

                    b.Property<int>("TotalProductsSold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DailyLedgers");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.CategoryElement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryElement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CategoryElement");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Estado", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<int>("EstadoEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("EstadosCategoria");
                });

            modelBuilder.Entity("Heliconia.Domain.CompaniesEntities.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeliconiaUserId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeliconiaUserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Heliconia.Domain.CompaniesEntities.Store", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Heliconia.Domain.PurchasesEntities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("IdentificationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Heliconia.Domain.PurchasesEntities.Purchase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("DatePurchase")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<double>("TotalPurchasePrice")
                        .HasColumnType("float");

                    b.Property<int>("TotalUnits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Heliconia.Domain.UsersEntities.HeliconiaUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Lasname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeliconiasUsers");
                });

            modelBuilder.Entity("Heliconia.Domain.UsersEntities.Manager", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Lasname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Heliconia.Domain.UsersEntities.Worker", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Lasname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Category", b =>
                {
                    b.HasBaseType("Heliconia.Domain.CategoryEntities.CategoryElement");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("int");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Product", b =>
                {
                    b.HasBaseType("Heliconia.Domain.CategoryEntities.CategoryElement");

                    b.Property<string>("CategoryElementId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("CodigoBarras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameLastState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PurchaseId")
                        .HasColumnType("varchar(36)");

                    b.HasIndex("PurchaseId");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("Heliconia.Domain.AccountingEntities.DailyLedger", b =>
                {
                    b.HasOne("Heliconia.Domain.CompaniesEntities.Company", null)
                        .WithMany("DailyLedgers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.CategoryElement", b =>
                {
                    b.HasOne("Heliconia.Domain.CategoryEntities.Category", null)
                        .WithMany("Elements")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Estado", b =>
                {
                    b.HasOne("Heliconia.Domain.CategoryEntities.Product", null)
                        .WithMany("Estados")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.CompaniesEntities.Company", b =>
                {
                    b.HasOne("Heliconia.Domain.UsersEntities.HeliconiaUser", null)
                        .WithMany("Companies")
                        .HasForeignKey("HeliconiaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.CompaniesEntities.Store", b =>
                {
                    b.HasOne("Heliconia.Domain.CompaniesEntities.Company", null)
                        .WithMany("Companies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.PurchasesEntities.Purchase", b =>
                {
                    b.HasOne("Heliconia.Domain.PurchasesEntities.Customer", null)
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.UsersEntities.Manager", b =>
                {
                    b.HasOne("Heliconia.Domain.CompaniesEntities.Company", null)
                        .WithMany("Managers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.UsersEntities.Worker", b =>
                {
                    b.HasOne("Heliconia.Domain.CompaniesEntities.Store", null)
                        .WithMany("Workers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Category", b =>
                {
                    b.HasOne("Heliconia.Domain.CompaniesEntities.Store", null)
                        .WithMany("Categories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Product", b =>
                {
                    b.HasOne("Heliconia.Domain.PurchasesEntities.Purchase", null)
                        .WithMany("Products")
                        .HasForeignKey("PurchaseId");
                });

            modelBuilder.Entity("Heliconia.Domain.CompaniesEntities.Company", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("DailyLedgers");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Heliconia.Domain.CompaniesEntities.Store", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Heliconia.Domain.PurchasesEntities.Customer", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Heliconia.Domain.PurchasesEntities.Purchase", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Heliconia.Domain.UsersEntities.HeliconiaUser", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Category", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Heliconia.Domain.CategoryEntities.Product", b =>
                {
                    b.Navigation("Estados");
                });
#pragma warning restore 612, 618
        }
    }
}
